// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class UserInfo extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserInfo must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserInfo", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserInfo | null {
    return changetype<UserInfo | null>(
      store.get_in_block("UserInfo", id.toHexString()),
    );
  }

  static load(id: Bytes): UserInfo | null {
    return changetype<UserInfo | null>(store.get("UserInfo", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get ticketsPurchaseList(): TicketsPurchaseLoader {
    return new TicketsPurchaseLoader(
      "UserInfo",
      this.get("id")!.toBytes().toHexString(),
      "ticketsPurchaseList",
    );
  }

  get TicketsGetList(): TicketsGetLoader {
    return new TicketsGetLoader(
      "UserInfo",
      this.get("id")!.toBytes().toHexString(),
      "TicketsGetList",
    );
  }

  get prizeDrawnList(): PrizeDrawnLoader {
    return new PrizeDrawnLoader(
      "UserInfo",
      this.get("id")!.toBytes().toHexString(),
      "prizeDrawnList",
    );
  }

  get claimPrizeList(): ClaimPrizeLoader {
    return new ClaimPrizeLoader(
      "UserInfo",
      this.get("id")!.toBytes().toHexString(),
      "claimPrizeList",
    );
  }
}

export class RedEnvelope extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RedEnvelope entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RedEnvelope must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RedEnvelope", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RedEnvelope | null {
    return changetype<RedEnvelope | null>(
      store.get_in_block("RedEnvelope", id),
    );
  }

  static load(id: string): RedEnvelope | null {
    return changetype<RedEnvelope | null>(store.get("RedEnvelope", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ticketToken(): Bytes {
    let value = this.get("ticketToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set ticketToken(value: Bytes) {
    this.set("ticketToken", Value.fromBytes(value));
  }

  get ticketPirce(): BigInt {
    let value = this.get("ticketPirce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ticketPirce(value: BigInt) {
    this.set("ticketPirce", Value.fromBigInt(value));
  }

  get status(): i64 {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set status(value: i64) {
    this.set("status", Value.fromI64(value));
  }

  get model(): i64 {
    let value = this.get("model");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set model(value: i64) {
    this.set("model", Value.fromI64(value));
  }

  get sendAllowAddr(): Bytes {
    let value = this.get("sendAllowAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sendAllowAddr(value: Bytes) {
    this.set("sendAllowAddr", Value.fromBytes(value));
  }

  get buyTickets(): BigInt {
    let value = this.get("buyTickets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set buyTickets(value: BigInt) {
    this.set("buyTickets", Value.fromBigInt(value));
  }

  get sendTickets(): BigInt {
    let value = this.get("sendTickets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sendTickets(value: BigInt) {
    this.set("sendTickets", Value.fromBigInt(value));
  }

  get injectTickets(): BigInt {
    let value = this.get("injectTickets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set injectTickets(value: BigInt) {
    this.set("injectTickets", Value.fromBigInt(value));
  }

  get autoClaim(): boolean {
    let value = this.get("autoClaim");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set autoClaim(value: boolean) {
    this.set("autoClaim", Value.fromBoolean(value));
  }

  get maxTickets(): BigInt {
    let value = this.get("maxTickets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxTickets(value: BigInt) {
    this.set("maxTickets", Value.fromBigInt(value));
  }

  get maxPrizeNum(): BigInt {
    let value = this.get("maxPrizeNum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxPrizeNum(value: BigInt) {
    this.set("maxPrizeNum", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get startTimestamp(): BigInt {
    let value = this.get("startTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTimestamp(value: BigInt) {
    this.set("startTimestamp", Value.fromBigInt(value));
  }

  get endTimestamp(): BigInt | null {
    let value = this.get("endTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("endTimestamp");
    } else {
      this.set("endTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdEvent(): RedEnvelopeCreatedLoader {
    return new RedEnvelopeCreatedLoader(
      "RedEnvelope",
      this.get("id")!.toString(),
      "createdEvent",
    );
  }

  get closedEvent(): RedEnvelopeClosedLoader {
    return new RedEnvelopeClosedLoader(
      "RedEnvelope",
      this.get("id")!.toString(),
      "closedEvent",
    );
  }

  get claimableEvent(): RedEnvelopeClaimableLoader {
    return new RedEnvelopeClaimableLoader(
      "RedEnvelope",
      this.get("id")!.toString(),
      "claimableEvent",
    );
  }

  get ticketsInjectList(): TicketsInjectLoader {
    return new TicketsInjectLoader(
      "RedEnvelope",
      this.get("id")!.toString(),
      "ticketsInjectList",
    );
  }

  get ticketsPurchaseList(): TicketsPurchaseLoader {
    return new TicketsPurchaseLoader(
      "RedEnvelope",
      this.get("id")!.toString(),
      "ticketsPurchaseList",
    );
  }

  get TicketsGetList(): TicketsGetLoader {
    return new TicketsGetLoader(
      "RedEnvelope",
      this.get("id")!.toString(),
      "TicketsGetList",
    );
  }

  get prizeDrawnList(): PrizeDrawnLoader {
    return new PrizeDrawnLoader(
      "RedEnvelope",
      this.get("id")!.toString(),
      "prizeDrawnList",
    );
  }

  get claimPrizeList(): ClaimPrizeLoader {
    return new ClaimPrizeLoader(
      "RedEnvelope",
      this.get("id")!.toString(),
      "claimPrizeList",
    );
  }
}

export class ClaimPrize extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimPrize entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ClaimPrize must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ClaimPrize", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ClaimPrize | null {
    return changetype<ClaimPrize | null>(
      store.get_in_block("ClaimPrize", id.toHexString()),
    );
  }

  static load(id: Bytes): ClaimPrize | null {
    return changetype<ClaimPrize | null>(
      store.get("ClaimPrize", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get winner(): Bytes {
    let value = this.get("winner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set winner(value: Bytes) {
    this.set("winner", Value.fromBytes(value));
  }

  get totalAmount(): BigInt {
    let value = this.get("totalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmount(value: BigInt) {
    this.set("totalAmount", Value.fromBigInt(value));
  }

  get autoClaim(): boolean {
    let value = this.get("autoClaim");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set autoClaim(value: boolean) {
    this.set("autoClaim", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get redEnvelope(): string {
    let value = this.get("redEnvelope");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set redEnvelope(value: string) {
    this.set("redEnvelope", Value.fromString(value));
  }

  get userInfo(): Bytes {
    let value = this.get("userInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userInfo(value: Bytes) {
    this.set("userInfo", Value.fromBytes(value));
  }

  get prizeDrawnList(): PrizeDrawnLoader {
    return new PrizeDrawnLoader(
      "ClaimPrize",
      this.get("id")!.toBytes().toHexString(),
      "prizeDrawnList",
    );
  }
}

export class DefaultAutoClaimChange extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DefaultAutoClaimChange entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DefaultAutoClaimChange must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DefaultAutoClaimChange", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DefaultAutoClaimChange | null {
    return changetype<DefaultAutoClaimChange | null>(
      store.get_in_block("DefaultAutoClaimChange", id.toHexString()),
    );
  }

  static load(id: Bytes): DefaultAutoClaimChange | null {
    return changetype<DefaultAutoClaimChange | null>(
      store.get("DefaultAutoClaimChange", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get defaultAutoClaim(): boolean {
    let value = this.get("defaultAutoClaim");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set defaultAutoClaim(value: boolean) {
    this.set("defaultAutoClaim", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DefaultTokenChange extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DefaultTokenChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DefaultTokenChange must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DefaultTokenChange", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DefaultTokenChange | null {
    return changetype<DefaultTokenChange | null>(
      store.get_in_block("DefaultTokenChange", id.toHexString()),
    );
  }

  static load(id: Bytes): DefaultTokenChange | null {
    return changetype<DefaultTokenChange | null>(
      store.get("DefaultTokenChange", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get defaultTicketToken(): Bytes {
    let value = this.get("defaultTicketToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set defaultTicketToken(value: Bytes) {
    this.set("defaultTicketToken", Value.fromBytes(value));
  }

  get defaultTicketPirce(): BigInt {
    let value = this.get("defaultTicketPirce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set defaultTicketPirce(value: BigInt) {
    this.set("defaultTicketPirce", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OperatorAddress extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OperatorAddress entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OperatorAddress must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("OperatorAddress", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OperatorAddress | null {
    return changetype<OperatorAddress | null>(
      store.get_in_block("OperatorAddress", id.toHexString()),
    );
  }

  static load(id: Bytes): OperatorAddress | null {
    return changetype<OperatorAddress | null>(
      store.get("OperatorAddress", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get operatorAddress(): Bytes {
    let value = this.get("operatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set operatorAddress(value: Bytes) {
    this.set("operatorAddress", Value.fromBytes(value));
  }

  get opt(): boolean {
    let value = this.get("opt");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set opt(value: boolean) {
    this.set("opt", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("OwnershipTransferred", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get_in_block("OwnershipTransferred", id.toHexString()),
    );
  }

  static load(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class PrizeDrawn extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PrizeDrawn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PrizeDrawn must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PrizeDrawn", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PrizeDrawn | null {
    return changetype<PrizeDrawn | null>(
      store.get_in_block("PrizeDrawn", id.toHexString()),
    );
  }

  static load(id: Bytes): PrizeDrawn | null {
    return changetype<PrizeDrawn | null>(
      store.get("PrizeDrawn", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get winner(): Bytes {
    let value = this.get("winner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set winner(value: Bytes) {
    this.set("winner", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get autoClaim(): boolean {
    let value = this.get("autoClaim");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set autoClaim(value: boolean) {
    this.set("autoClaim", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get redEnvelope(): string {
    let value = this.get("redEnvelope");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set redEnvelope(value: string) {
    this.set("redEnvelope", Value.fromString(value));
  }

  get userInfo(): Bytes {
    let value = this.get("userInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userInfo(value: Bytes) {
    this.set("userInfo", Value.fromBytes(value));
  }

  get claimPrize(): Bytes | null {
    let value = this.get("claimPrize");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set claimPrize(value: Bytes | null) {
    if (!value) {
      this.unset("claimPrize");
    } else {
      this.set("claimPrize", Value.fromBytes(<Bytes>value));
    }
  }
}

export class RedEnvelopeClaimable extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RedEnvelopeClaimable entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RedEnvelopeClaimable must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RedEnvelopeClaimable", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RedEnvelopeClaimable | null {
    return changetype<RedEnvelopeClaimable | null>(
      store.get_in_block("RedEnvelopeClaimable", id),
    );
  }

  static load(id: string): RedEnvelopeClaimable | null {
    return changetype<RedEnvelopeClaimable | null>(
      store.get("RedEnvelopeClaimable", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get redEnvelope(): string {
    let value = this.get("redEnvelope");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set redEnvelope(value: string) {
    this.set("redEnvelope", Value.fromString(value));
  }
}

export class RedEnvelopeClosed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RedEnvelopeClosed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RedEnvelopeClosed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RedEnvelopeClosed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RedEnvelopeClosed | null {
    return changetype<RedEnvelopeClosed | null>(
      store.get_in_block("RedEnvelopeClosed", id),
    );
  }

  static load(id: string): RedEnvelopeClosed | null {
    return changetype<RedEnvelopeClosed | null>(
      store.get("RedEnvelopeClosed", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get redEnvelope(): string {
    let value = this.get("redEnvelope");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set redEnvelope(value: string) {
    this.set("redEnvelope", Value.fromString(value));
  }
}

export class RedEnvelopeCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RedEnvelopeCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RedEnvelopeCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RedEnvelopeCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RedEnvelopeCreated | null {
    return changetype<RedEnvelopeCreated | null>(
      store.get_in_block("RedEnvelopeCreated", id),
    );
  }

  static load(id: string): RedEnvelopeCreated | null {
    return changetype<RedEnvelopeCreated | null>(
      store.get("RedEnvelopeCreated", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get maxTickets(): BigInt {
    let value = this.get("maxTickets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxTickets(value: BigInt) {
    this.set("maxTickets", Value.fromBigInt(value));
  }

  get maxPrizeNum(): BigInt {
    let value = this.get("maxPrizeNum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxPrizeNum(value: BigInt) {
    this.set("maxPrizeNum", Value.fromBigInt(value));
  }

  get autoClaim(): boolean {
    let value = this.get("autoClaim");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set autoClaim(value: boolean) {
    this.set("autoClaim", Value.fromBoolean(value));
  }

  get ticketPirce(): BigInt {
    let value = this.get("ticketPirce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ticketPirce(value: BigInt) {
    this.set("ticketPirce", Value.fromBigInt(value));
  }

  get sendAllowAddr(): Bytes {
    let value = this.get("sendAllowAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sendAllowAddr(value: Bytes) {
    this.set("sendAllowAddr", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get redEnvelope(): string {
    let value = this.get("redEnvelope");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set redEnvelope(value: string) {
    this.set("redEnvelope", Value.fromString(value));
  }
}

export class TicketsGet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TicketsGet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TicketsGet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TicketsGet", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TicketsGet | null {
    return changetype<TicketsGet | null>(
      store.get_in_block("TicketsGet", id.toHexString()),
    );
  }

  static load(id: Bytes): TicketsGet | null {
    return changetype<TicketsGet | null>(
      store.get("TicketsGet", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get receiveAddress(): Bytes {
    let value = this.get("receiveAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set receiveAddress(value: Bytes) {
    this.set("receiveAddress", Value.fromBytes(value));
  }

  get ticketNumbers(): BigInt {
    let value = this.get("ticketNumbers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ticketNumbers(value: BigInt) {
    this.set("ticketNumbers", Value.fromBigInt(value));
  }

  get fromIndex(): BigInt {
    let value = this.get("fromIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fromIndex(value: BigInt) {
    this.set("fromIndex", Value.fromBigInt(value));
  }

  get toIndex(): BigInt {
    let value = this.get("toIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set toIndex(value: BigInt) {
    this.set("toIndex", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get redEnvelope(): string {
    let value = this.get("redEnvelope");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set redEnvelope(value: string) {
    this.set("redEnvelope", Value.fromString(value));
  }

  get userInfo(): Bytes {
    let value = this.get("userInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userInfo(value: Bytes) {
    this.set("userInfo", Value.fromBytes(value));
  }
}

export class TicketsInject extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TicketsInject entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TicketsInject must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TicketsInject", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TicketsInject | null {
    return changetype<TicketsInject | null>(
      store.get_in_block("TicketsInject", id.toHexString()),
    );
  }

  static load(id: Bytes): TicketsInject | null {
    return changetype<TicketsInject | null>(
      store.get("TicketsInject", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get ticketNumbers(): BigInt {
    let value = this.get("ticketNumbers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ticketNumbers(value: BigInt) {
    this.set("ticketNumbers", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get redEnvelope(): string {
    let value = this.get("redEnvelope");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set redEnvelope(value: string) {
    this.set("redEnvelope", Value.fromString(value));
  }
}

export class TicketsPurchase extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TicketsPurchase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TicketsPurchase must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TicketsPurchase", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TicketsPurchase | null {
    return changetype<TicketsPurchase | null>(
      store.get_in_block("TicketsPurchase", id.toHexString()),
    );
  }

  static load(id: Bytes): TicketsPurchase | null {
    return changetype<TicketsPurchase | null>(
      store.get("TicketsPurchase", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get receiveAddress(): Bytes {
    let value = this.get("receiveAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set receiveAddress(value: Bytes) {
    this.set("receiveAddress", Value.fromBytes(value));
  }

  get ticketNumbers(): BigInt {
    let value = this.get("ticketNumbers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ticketNumbers(value: BigInt) {
    this.set("ticketNumbers", Value.fromBigInt(value));
  }

  get fromIndex(): BigInt {
    let value = this.get("fromIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fromIndex(value: BigInt) {
    this.set("fromIndex", Value.fromBigInt(value));
  }

  get toIndex(): BigInt {
    let value = this.get("toIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set toIndex(value: BigInt) {
    this.set("toIndex", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get redEnvelope(): string {
    let value = this.get("redEnvelope");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set redEnvelope(value: string) {
    this.set("redEnvelope", Value.fromString(value));
  }

  get userInfo(): Bytes {
    let value = this.get("userInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userInfo(value: Bytes) {
    this.set("userInfo", Value.fromBytes(value));
  }
}

export class TicketsPurchaseLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TicketsPurchase[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TicketsPurchase[]>(value);
  }
}

export class TicketsGetLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TicketsGet[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TicketsGet[]>(value);
  }
}

export class PrizeDrawnLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PrizeDrawn[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PrizeDrawn[]>(value);
  }
}

export class ClaimPrizeLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ClaimPrize[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ClaimPrize[]>(value);
  }
}

export class RedEnvelopeCreatedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RedEnvelopeCreated[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RedEnvelopeCreated[]>(value);
  }
}

export class RedEnvelopeClosedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RedEnvelopeClosed[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RedEnvelopeClosed[]>(value);
  }
}

export class RedEnvelopeClaimableLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RedEnvelopeClaimable[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RedEnvelopeClaimable[]>(value);
  }
}

export class TicketsInjectLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TicketsInject[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TicketsInject[]>(value);
  }
}
