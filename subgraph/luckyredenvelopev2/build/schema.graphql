#用户详情
type UserInfo @entity{
  id: Bytes!  #用户地址
  ticketsPurchaseList: [TicketsPurchase!]  @derivedFrom(field: "userInfo")  #购注记录
  TicketsGetList:[TicketsGet!]  @derivedFrom(field: "userInfo")  #领取记录
  prizeDrawnList: [PrizeDrawn!]  @derivedFrom(field: "userInfo")  #中奖记录
  claimPrizeList: [ClaimPrize!]  @derivedFrom(field: "userInfo")  #领取记录
}


#红包详情
type  RedEnvelope @entity{
  id: String!
  ticketToken: Bytes!
  ticketPirce: BigInt! # uint256 

  status:   Int8! #1:open 2:Close 3:Feed 4:Claimable
  model:   Int8! #1:buyTicket model 2:getTicket model


  getTicketAddr: Bytes!
  
  buyTickets: BigInt! # uint256  购注总数
  getTickets: BigInt! # uint256  领取总数
  injectTickets: BigInt! # uint256  注入总数

  autoClaim: Boolean! # bool  是否自动领取
  maxTickets: BigInt! # uint256   最大奖注数限制
  maxPrizeNum:BigInt! # uint256   最大中奖数，为0表明100%中奖

  startTimestamp:BigInt!  #开始时间
  endTimeTimestamp:BigInt #结束时间

  createdEvent: RedEnvelopeCreated  @derivedFrom(field: "redEnvelope")  #创建事件记录
  closedEvent: RedEnvelopeClosed    @derivedFrom(field: "redEnvelope")  #停止事件记录
  claimableEvent: RedEnvelopeClaimable   @derivedFrom(field: "redEnvelope") #开奖事件记录
 

  ticketsInjectList: [TicketsInject!]      @derivedFrom(field: "redEnvelope")  #注入记录list
  ticketsPurchaseList:[TicketsPurchase!]   @derivedFrom(field: "redEnvelope")  #购注记录list
  TicketsGetList:[TicketsGet!]   @derivedFrom(field: "redEnvelope")  #领取记录list
  prizeDrawnList: [PrizeDrawn!]    @derivedFrom(field: "redEnvelope")  #中奖记录list
  claimPrizeList: [ClaimPrize!]    @derivedFrom(field: "redEnvelope")  #领奖记录list

}

type ClaimPrize @entity(immutable: true) {
  id: Bytes!
  winner: Bytes! # address
  totalAmount: BigInt! # uint256
  autoClaim: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  userInfo:UserInfo!
  prizeDrawnList:[PrizeDrawn!]!  @derivedFrom(field: "claimPrize")
}

type DefaultAutoClaimChange @entity(immutable: true) {
  id: Bytes!
  defaultAutoClaim: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DefaultTokenChange @entity(immutable: true) {
  id: Bytes!
  defaultTicketToken: Bytes! # address
  defaultTicketPirce: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OperatorAddress @entity(immutable: true) {
  id: Bytes!
  operatorAddress: Bytes! # address
  opt: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PrizeDrawn @entity(immutable: true) {
  id: Bytes!
  winner: Bytes! # address
  index: BigInt! # uint256
  amount: BigInt! # uint256
  autoClaim: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  userInfo:UserInfo!
  claimPrize:ClaimPrize
  
}

type RedEnvelopeClaimable @entity(immutable: true) {
  id: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
}

type RedEnvelopeClosed @entity(immutable: true) {
  id: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
}

type RedEnvelopeCreated @entity(immutable: true) {
  id: String!
  startTime: BigInt! # uint256
  endTime: BigInt! # uint256
  maxTickets: BigInt! # uint256
  maxPrizeNum: BigInt! # uint256
  autoClaim:Boolean!
  ticketPirce: BigInt! # uint256 
  getTicketAddr:Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
}


type TicketsGet @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  receiveAddress: Bytes! # address
  ticketNumbers: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  userInfo:UserInfo!
}

type TicketsInject @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  ticketNumbers: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  
}

type TicketsPurchase @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  receiveAddress: Bytes! # address
  ticketNumbers: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  userInfo:UserInfo!
}
