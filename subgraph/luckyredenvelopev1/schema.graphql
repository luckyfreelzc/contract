#用户详情
type UserInfo @entity{
  id: Bytes!  #用户地址
  ticketsPurchaseList: [TicketsPurchase!]  @derivedFrom(field: "userInfo")  #购注记录
  prizeDrawnList: [PrizeDrawn!]  @derivedFrom(field: "userInfo")  #中奖记录
  claimPrizeList: [ClaimPrize!]  @derivedFrom(field: "userInfo")  #领取记录
}

#红包详情
type  RedEnvelope @entity{
  id: String!
  status:   Int8! #1:open 2:Close  3:Claimable
  
  userTickets: BigInt! # uint256  购注总数
  injectTickets: BigInt! # uint256  注入总数

  autoClaim: Boolean! # bool
  maxTickets: BigInt! # uint256 
  ticketPirce: BigInt! # uint256 

  startTimestamp:BigInt!
  endTimeTimestamp:BigInt

  createdEvent: RedEnvelopeCreated  @derivedFrom(field: "redEnvelope")  #创建事件记录
  closedEvent: RedEnvelopeClosed    @derivedFrom(field: "redEnvelope")  #停止事件记录
  claimableEvent: RedEnvelopeClaimable   @derivedFrom(field: "redEnvelope") #开奖事件记录
 

  ticketsInjectList: [TicketsInject!]      @derivedFrom(field: "redEnvelope")  #注入记录list
  ticketsPurchaseList:[TicketsPurchase!]   @derivedFrom(field: "redEnvelope")  #购注记录list
  prizeDrawnList: [PrizeDrawn!]    @derivedFrom(field: "redEnvelope")  #中奖记录list
  claimPrizeList: [ClaimPrize!]    @derivedFrom(field: "redEnvelope")  #领奖记录list

}


type ClaimPrize @entity(immutable: true) {
  id: Bytes!
  winner: Bytes! # address
  totalAmount: BigInt! # uint256
  autoClaim: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  userInfo:UserInfo!
  prizeDrawnList:[PrizeDrawn!]!  @derivedFrom(field: "claimPrize")
}

type DefaultChange @entity(immutable: true) {
  id: Bytes!
  defaultTicketPirce: BigInt! # uint256
  defaultAutoClaim: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewOperatorAddress @entity(immutable: true) {
  id: Bytes!
  operatorAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PrizeDrawn @entity(immutable: true) {
  id: Bytes!
  winner: Bytes! # address
  index: BigInt! # uint256
  amount: BigInt! # uint256
  autoClaim: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  userInfo:UserInfo!
  claimPrize:ClaimPrize
  
}

type RedEnvelopeClaimable @entity(immutable: true) {
  id: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
}

type RedEnvelopeClosed @entity(immutable: true) {
  id: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
}

type RedEnvelopeCreated @entity(immutable: true) {
  id: String!
  setEndTime: BigInt! # uint256
  setMaxTickets: BigInt! # uint256
  setAutoClaim:Boolean!
  setTicketPirce: BigInt! # uint256 
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
}

type TicketsInject @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  ticketNumbers: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  
}

type TicketsPurchase @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  receiveAddress: Bytes! # address
  ticketNumbers: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  userInfo:UserInfo!
}
