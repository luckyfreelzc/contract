type UserInfo @entity{
  id: Bytes!
  address: Bytes! # address
  ticketsPurchaseList: [TicketsPurchase!]  @derivedFrom(field: "userInfo")  
  prizeDrawnList: [PrizeDrawn!]  @derivedFrom(field: "userInfo")  
  claimPrizeList: [ClaimPrize!]  @derivedFrom(field: "userInfo")  
}

type  RedEnvelope @entity{
  id: Bytes!
  LuckyRedEnvelope_id: BigInt! # uint256
  status:   Int8
  
  userTickets: BigInt! # uint256
  injectTickets: BigInt! # uint256

  createdEvent: RedEnvelopeCreated  @derivedFrom(field: "redEnvelope")
  closedEvent: RedEnvelopeClosed    @derivedFrom(field: "redEnvelope")
  claimableEvent: RedEnvelopeClaimable   @derivedFrom(field: "redEnvelope")
 

  ticketsInjectList: [TicketsInject!]      @derivedFrom(field: "redEnvelope")  
  ticketsPurchaseList:[TicketsPurchase!]   @derivedFrom(field: "redEnvelope")  
  prizeDrawnList: [PrizeDrawn!]    @derivedFrom(field: "redEnvelope")  
  claimPrizeList: [ClaimPrize!]    @derivedFrom(field: "redEnvelope")  

}


type ClaimPrize @entity(immutable: true) {
  id: Bytes!
  LuckyRedEnvelope_id: BigInt! # uint256
  winner: Bytes! # address
  totalAmount: BigInt! # uint256
  autoClaim: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  userInfo:UserInfo!
  prizeDrawnList:[PrizeDrawn!]!  @derivedFrom(field: "claimPrize")
}

type DefaultChange @entity(immutable: true) {
  id: Bytes!
  defaultTicketPirce: BigInt! # uint256
  defaultAutoClaim: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewOperatorAddress @entity(immutable: true) {
  id: Bytes!
  operatorAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PrizeDrawn @entity(immutable: true) {
  id: Bytes!
  LuckyRedEnvelope_id: BigInt! # uint256
  winner: Bytes! # address
  index: BigInt! # uint256
  amount: BigInt! # uint256
  autoClaim: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  userInfo:UserInfo!
  claimPrize:ClaimPrize
  
}

type RedEnvelopeClaimable @entity(immutable: true) {
  id: Bytes!
  LuckyRedEnvelope_id: BigInt! # uint256
  endTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
}

type RedEnvelopeClosed @entity(immutable: true) {
  id: Bytes!
  LuckyRedEnvelope_id: BigInt! # uint256
  endTime: BigInt! # uint256
  userTickets: BigInt! # uint256
  injectTickets: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
}

type RedEnvelopeCreated @entity(immutable: true) {
  id: Bytes!
  LuckyRedEnvelope_id: BigInt! # uint256
  startTime: BigInt! # uint256
  endTime: BigInt! # uint256
  maxTickets: BigInt! # uint256
  ticketPirce: BigInt! # uint256
  autoClaim: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
}

type TicketsInject @entity(immutable: true) {
  id: Bytes!
  LuckyRedEnvelope_id: BigInt! # uint256
  sender: Bytes! # address
  ticketNumbers: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  
}

type TicketsPurchase @entity(immutable: true) {
  id: Bytes!
  LuckyRedEnvelope_id: BigInt! # uint256
  sender: Bytes! # address
  receiveAddress: Bytes! # address
  ticketNumbers: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  redEnvelope:RedEnvelope!
  userInfo:UserInfo!
}
